Manual for A Typist's 65c02 Assembler in Forth 
Scot W. Stevenson <scot.stevenson@gmail.com>
First version: 07. Nov 2014 ("N7 Day")
This version: 11. Dec 2018


TL;DR

This is a cross-assembler for the 65c02 8-bit MPU. 

  - it is written in modern ANSI-orientated Forth (gforth 0.7).
  - its syntax ("Typist's Assembler Format") is optimized for ten-finger
    typing
  - it has true labels
  - it has a simple, brute-force structure that should make it easy to port
    to other processors

We don't care about stuff like memory footprints or speed because the assembler runs on normal PCs. 


SERIOUSLY, WHY?

Forth is a fantastic language to write assemblers in - 


DUDE, WHAT'S FORTH?

Forth is usually classed with the programming languages, though it's actually more an environment to create tailor-made programming languages in. An introduction to Forth is outside the scope of this document, see https://en.wikipedia.org/wiki/Forth_(programming_language) for general background and "Thinking Forth" by Leo Brodie (http://thinking-forth.sourceforge.net/) for a philosophical discussion. 

Anyway -- people kept telling me Forth was a fantastic language to write assemblers in, so I decided to see if was as easy as they kept saying.


HASN'T THAT BEEN DONE BEFORE?

There are all kinds of great assemblers for the 6502/65c02 microprocessor out there -- see http://www.6502.org/tools/ for a list. However, the Forth assemblers available are usually old (some even pre-ANSI Forth, listed in "screens") and focused on a minimal memory footprint. The result is usually an instruction format that can be downright bizarre. Take this snippet from "A Forth Assembler for the 6502" by William Raqsdale as published in Vol 3, Issue 5 of "Forth Dimensions" (1982, http://www.forth.org/fd/FD-V03N5.pdf): 

               .A ROL,
              1 # LDY,
          DATA ,X STA,
          DATA ,Y CMP,
             6 X) ADC,
         POINT )Y STA,
         VECTOR ) JMP,

This is hard to read, with up to two operands and weirdness such as brackets that close but never open or those commas come before a letter, not after it. There are other formats that are slightly better or slightly worse. I wouldn't want to have to read the syntax of any of them, let alone write code that way.

Which brings me to a pet peeve: I have never really liked the standard assembler syntax for the 6502 with all the special characters like "$" and 
"(", simply because I'm a ten-finger typist. Anything that requires the SHIFT key slows you down. If we're going to have to create a new syntax anyway, we might as well take care of that problem at the same time.


SO LET'S SEE THIS NEW SYNTAX OF YOURS

Like all Forth, we use postfix notation (aka "ass-backwards"). We start with the operand, followed by a special version of the opcode that includes the addressing mode as an addition to to the opcode following a dot. This is the opcode's "tail" (because it would get confusing if we called it "postfix" as well). This way,  

    lda $10       becomes         10 lda.z    

The new opcodes are justified along the space between them and the operand. 
Note we don't have to use "$", "%" or "#" for the number formats because we can use HEX, BINARY, and DECIMAL from normal Forth. The complete list of addressing modes for the 65c02 is: 

    implied                   dex                    dex
    accumulator               inc                    inc.a
    absolute                  lda $1000         1000 lda
    immediate                 lda #$00            00 lda.#
    absolute x indexed        lda $1000,x       1000 lda.x
    absolute y indexed        lda $1000,y       1000 lda.y
    absolute indirect         jmp ($1000)       1000 jmp.i
    indexed indirect          jmp ($1000,x)     1000 jmp.xi
    zero page                 lda $10             10 lda.z
    zero page x indexed       lda $10,x           10 lda.zx
    zero page y indexed       lda $10,y           10 lda.zy
    zero page indirect        lda ($10)           10 lda.zi
    zp indirect x indexed     lda ($10,x)         10 lda.zxi
    zp indirect y indexed     lda ($10),y         10 lda.ziy
    relative                  bne $2000         2000 bne

Note that the "i" (for "indirect") is put where the parenthesis is in normal notation (compare lda.zxi and lda.ziy). The Branch instruction family is treated differently, because we assume that usually a label will usually be used instead of the actual offset. Immediate addressing has keep the hash sign ("#") because it is a "lower case" special character and we avoid conflicts with the "i" used for indirect mode. 

Where Forth words conflict with the opcodes, we add a dot to the opcode, but leave off the tail in absolute mode. 

    AND $1000     becomes       1000 and. 

A small example: 

              lda #$00                        00 lda.#
              tax                                tax
    loop1:                        -> loop1
              sta $1000,x                   1000 sta.x
              dex                                dex
              bne loop1                    loop1 bne


Included in this package are two larger example files: 

    example.fs - Heavily commented, but won't produce working code
             if assembled. 
        
    rom.fs - Fewer comments, but will produce a working 8k image that can be
             tested with a program such as py64rom 
             (https://github.com/mnaberez/py65). After assembly to rom.bin, 
             call   py65mon --mpu 65c02 -r rom.bin 


COMMENTS, SPACING, AND MULTIPLE COMMANDS

Since this is Forth, you start out with the complete set of Forth commands you can use in the assembler program. This means that comments are marked by a "\" that comments out everything to the end of the line (the ";" of conventional assemblers), and anything in round brackets is ignored as well.

             00 lda.z   ( this is a comment ) 
             01 sta.z   \ this comment takes out the rest of the line 

Since this is not a normal assembler, but Forth, we can put more than one instructions in one line. The convention is to leave three spaces between "blocked" instructions if they have an operand and one if not.

             10 lda.z   1000 sta
             11 lda.z   1001 sta 

             nop nop nop nop nop 

(Of course, if we have lots of instructions that are all the same, we should use Forth to write a macro anyway:

             : n-nops  ( u -- )  0 ?do  nop  loop ; 
             5 n-nops 

Remember to use ?DO instead of just do on an ANSI Forth system such as this one to prevent "0 0" loops that go through the complete number space. Fig-FORTH users don't have this problem.) 


ASSEMBLER COMMANDS

For quick typing, all commands are lower case, but will be listed here in upper case for quicker reference. In keeping with Forth conventions, assembler commands are not prefixed with with a dot -- in Forth, these are words that print something to the screen. 

    ORIGIN ( 65addr -- ) Tells the assembler where to start compilation in the 65c02's address space. This word is required. 

    B, ( u -- ) Store one byte in memory. Note this can be use with Forth LOOPs etc.

    W, ( u -- ) Store one word (16 bit) in memory in correct little-endian format. 

    STR, ( addr u -- ) Store a ASCII string in memory. Use with S" STRING". Note that gforth uses S, so we can't. 

    STR0, (addr u -- ) Store a zero-terminated string in memory. Use with
S" STRING".

    STRLF, (addr u -- ) Store a linefeed-terminated string in memory. Use 
with S" STRING".

    LSB ( u -- u ) returns the least significant byte of a 16-bit number

    MSB ( u -- u ) returns the most significant byte of a 16-bit number

    ADVANCE ( 65addr -- ) Continue assembly at the address given, filling everything between here and there with zeros.

    END ( -- addr u ) End assembly, returning the address in Forth's memory where the first assembled instruction was saved and the length of the binary file. Use command such as DUMP to print it to the screen. 

    SAVE ( addr u "name" -- ) Following END, save the binary output to the file given. Note this will brutally overwrite existing files without warning. 

We don't need a ".EQU" command -- just use the VALUE built-in Forth command. 



LABELS, JUMPS AND BRANCHES

Here's another problem with existing Forth assemblers: A lot of them don't accept labels, especially not forward references. They tell you to suck it up and use "structured programming" instead. Er, no. 

As you can tell from the examples, labels are prefixed with "->" ("-->" would have been easier to read but it's used in ancient Forths as part of the BLOCK commands). Once a label is defined, you can use it for backwards jumps, branches and references without further ado. 
   
        -> frog  
                      nop
                 frog bra
                 frog jmp

(When choosing a loop label name, remember that LOOP is already taken by Forth itself, as are REPEAT, BEGIN, and AGAIN.) 

Forward branches are a bit more complicated, because internally the assembler has to create a list of unresolved references until the actual location of the label is known (a well-defined problem with single-pass assemblers). We deal with this by putting a special instruction at the start of the lines with forward references: "J>" for jumps (absolute addressing) and "B>" for branches (relative addressing). 

             j>  frog jsr 
                      nop

             j>  frog jsr 
                      nop

             b>  dogs bra
                      nop

        -> dogs
                      brk 
        -> frog 
                      inc

                 dogs bra 
                      rts

Note that by convention, there are two spaces between the "J>" or "B>" instruction and the label name. After the label has been defined with "->", we can access it without any further hassle. Because of the way forward references are handled, it is easier to deal with strings and subroutines if they are defined before the main code. 

To access the most significant byte of a unresolved address referenced by a
label, we use "MSB>", for the least significant byte we use "LSB>". For example, let's say the subroutine PRTSTR prints a zero-terminated string
with the address in $00 and $01

        lsb>  truthstr lda.#   00 sta.z
        msb>  truthstr lda.#   01 sta.z

                prtstr jsr 
                       brk 
        -> truthstr
             s" Cats are cool" str0,

Note we use a variant of STR, here that automatically adds the terminating zero.

CALLING THE ASSEMBLER

Start gforth. Then, INCLUDE the assembler: 

        include tasm65c02.fs

Do the same with your source file, in this case example.fs

        include example.fs

You will be left with ( addr u ) on the stack, describing the beginning of the machine code and the number of bytes in it. 


ANYTHING ELSE?

The assembler uses single, unsorted linked lists to deal with unresolved forward references. Use the following routine to print the contents of these list during debugging. 

\ Print entries in simple linked list when given xt of list
: dumplabellist ( xt -- ) 
   >body
   begin
      dup
   while
      dup cell+ @ .       \ print data
      dup 2 cells +  @    \ print type of link
          if ." (jump) " else ." (branch) " then
      @
   repeat
   drop ; 
 

LEGAL STUFF

A Typist's 65c02 Assembler in Forth is released in the public domain, see
LICENSE. Use this software at your own risk. 


LINKS 

- For all things to do with the 6502/65c02/65816, see http://www.6502.org/
  Very nice, very helpful people. 

- Brad Rodriguez has published a series of articles on how to write your own assembler in Forth which were invaluable for this project. See those and other writings on Forth at http://www.bradrodriguez.com/papers/

- Backgrounder book: "Assemblers And Loaders" by David Salomon (1993). Available as free PDF from 
  http://www.davidsalomon.name/assem.advertis/AssemAd.html
